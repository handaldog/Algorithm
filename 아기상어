import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class _아기상어 {

	static class node {
		int x;
		int y;
		int dist;

		node(int x, int y, int dist) {
			this.x = x;
			this.y = y;
			this.dist = dist;
		}
	}

	static int sea[][];
	static int n;
	static int sharki;
	static int sharkj;
	static int sharksize;
	static boolean visit[][];
	static int di[] = { 1, -1, 0, 0 };
	static int dj[] = { 0, 0, 1, -1 };

	static Queue<node> que = new LinkedList<>();

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		n = Integer.parseInt(br.readLine());

		sea = new int[n][n];
		visit = new boolean[n][n];

		for (int i = 0; i < n; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for (int j = 0; j < n; j++) {
				sea[i][j] = Integer.parseInt(st.nextToken());
				if (sea[i][j] == 9) {
					sharki = i;
					sharkj = j;
				}
			}
		}

		bfs(sharki, sharkj);

	}

	public static void bfs(int sharki, int sharkj) {
		// visit, pq, que 모두 초기화 시키기
		que.offer(new node(sharki, sharkj, 0));
		visit[sharki][sharkj] = true;

		while (!que.isEmpty()) {
			node no = que.poll();

			for (int c = 0; c < 4; c++) {
				int nexti = no.x + di[c];
				int nextj = no.y + dj[c];

				if (nexti >= 0 && nextj >= 0 && nexti < n && nextj < n && !visit[nexti][nextj]) {
					if (sea[nexti][nextj] > sharksize) {
						visit[nexti][nextj] = true;

						que.offer(new node(nexti, nextj, no.dist + 1));
					} else if (sea[nexti][nextj] == sharksize || sea[nexti][nextj] == 0) {
						visit[nexti][nextj] = true;
						que.offer(new node(nexti, nextj, no.dist + 1));

						// 상어 이동하기로 정했으면 sum에다 cnt값 저장해놓기.
					}

				}
			}
		}
	}
}
